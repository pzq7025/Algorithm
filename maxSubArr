#include <iostream>
#include <vector>
#include <algorithm>
#include <set>

using namespace std;

int maxSubArray(vector<int>& nums);  // 最大子序和

int main() {
    vector<int> nums = {2, 7, 9, 3, 1};
    cout << maxSubArray(nums);  // 最大子序和
    return 0;
}

/**
 * 贪心的核心：如果加出来的值是负数  就舍弃前面的序列  找寻数组最大值
 * 动规的核心：如果待加的值 >0 就继续叠加  否则就跳过  这个找寻整个数组的最大值
 * 二分思想
 * @param nums
 * @return
 */
 
// 最大子序和
// 动态规划
int maxSubArray(vector<int>& nums) {
        if (nums.empty()){
            return 0;
        }
        if (nums.size() == 1){
            return nums[0];
        }
        int max_num = -9999999999;
        for (int i = 1; i < nums.size(); i++){
            if (nums[i - 1] > 0){
                nums[i] += nums[i-1];
            }
        }
        for (int i = 0; i < nums.size(); ++i){
            if(nums[i] > max_num){
                max_num = nums[i];
            }
        }
        return max_num;
}

//  贪心算法 (python)
/**
def max_sequence(arr):
    if len(arr) == 0:
        return 0
    max_num = cur_num = arr[0]
    for i in range(1, len(arr)):
        cur_num = max(arr[i], cur_num + arr[i])
        max_num = max(cur_num, max_num)
    if max_num < 0:
        return 0
    return max_num
*/
